( CHIP 8 ASSEMBLER FOR [VOLKS-] FORTH )›( 2023 BY CARSTEN STROTMANN, PSC     )›( COMMAND DEFINITIONS FROM HTTPS://GITHUB.COM/TRAPEXIT/CHIP-8_DOCUMENTATION )›( LICENSED UNDER GPL3 OR LATER )›CR›.( CHIP 8 ASSEMBLER ) CR›.( V: 0.0.2 ) CR››HEX›VOCABULARY CH8ASM›CH8ASM ALSO DEFINITIONS››( CHIP 8 REGISTER DEFINITIONS )›$00 CONSTANT V0›$01 CONSTANT V1›$02 CONSTANT V2›$03 CONSTANT V3›$04 CONSTANT V4›$05 CONSTANT V5›$06 CONSTANT V6›$07 CONSTANT V7›$08 CONSTANT V8›$09 CONSTANT V9›$0A CONSTANT VA›$0B CONSTANT VB›$0C CONSTANT VC›$0D CONSTANT VD›$0E CONSTANT VE›$0F CONSTANT VF››( 4KB CHIP8 CORE MEMORY)›VARIABLE CH8MEM››( HIGHEST MEMORY ADDRESS USED )›VARIABLE MAXMEM 0 MAXMEM !››( ALIAS DEFINITIONS FOR FORTH "AND", "OR" AND "XOR" )›' AND ALIAS $AND›' XOR ALIAS $XOR›' OR  ALIAS $OR››( LSHIFT - PERFORM A LOGICAL LEFT SHIFT OF U BIT-PLACES ON X1, GIVING X2. )›(  PUT ZEROES INTO THE LEAST SIGNIFICANT BITS VACATED BY THE SHIFT. )›(  AN AMBIGUOUS CONDITION EXISTS IF U IS GREATER THAN OR EQUAL TO THE )›(  NUMBER OF BITS IN A CELL. )›: LSHIFT ( X1 U -- X2 )›  0 ?DO 2* LOOP ;››( BYTESWAP )›: ><  ( 16B1 -- 16B2 )›  $80 ! $80 C@ $100 * $81 C@ OR ;››: DUMP ( ADR N -- )›  SWAP $0FFF $AND CH8MEM @ + SWAP›  OVER + SWAP›  ?DO I C@ U. LOOP ;››( ASSEMBLY ADDRESS )›VARIABLE 'ORG››( SET THE ASSEMBLE ADDRESS )›: ORG ( N -- ) 'ORG ! ;››$200 ORG››( STORE MEMNONIC IN CURRENT ORG MEMORY ADDRESS )›: ORG! ( N -- )›  ><   ( SWAP BYTES -> LITTLE TO BIG ENDIAN )›  'ORG @ CH8MEM @ + !›  'ORG @ 2 + $0FFF AND 'ORG !›  'ORG @ MAXMEM @ > IF 'ORG @ MAXMEM ! THEN›;››: OORG! ( N MASK -- )›  OR ORG! ;››( CLS MEMNONIC - CLEAR SCREEN )›: CLS $00E0 ORG! ;››( RET MEMNONIC - RETURN FROM SUBROUTINE )›: RET $00EE ORG! ;››( JMP MEMNONIC - JUMP TO ADDRESS )›: JMP ( NNN - )›  $0FFF AND $1000 OORG! ;››( JSR MEMNONIC AKA CALL - JUMP TO SUBROUTINE AT ADDRESS )›: JSR ( NNN - )›  $0FFF AND $2000 OORG! ;››( SKIP IF EQUAL AKA SE )›: SEQ ( VX NN - )›  $00FF AND $3000 OR›  SWAP $0F AND >< OORG! ;››( SKIP IF NOT EQUAL )›: SNE ( VX NN -- )›  $00FF AND $4000 OR›  SWAP $0F AND >< OORG! ;››( SKIP IF REGISTER EQUAL AKA SE VX,VY)›: SRE ( VY VX -- )›  $00FF AND >< $5000 OR SWAP›  $00FF AND 4 LSHIFT OORG! ;››( LOAD IMMEDIATE VALUE INTO REGISTER )›: LDV ( VX NN -- )›  $00FF AND SWAP $00FF AND >< OR›  $6000 OORG! ;››( ADD IMMEDIATE VALUE TO REGISTER )›: ADV ( VX NN -- )›  $00FF AND SWAP $00FF AND >< OR›  $7000 OORG! ;››( ADJUST PARAMETER FOR ALL OF THE COMMANDS USING VX AND VY AS INPUT )› : (VXYCMD) ( VX VY -- )›  $00FF AND >< SWAP $00FF AND›  4 LSHIFT OR ;››( COPY REGISTER VY INTO VX )›: CPR ( VY VX -- )›  (VXYCMD) $8000 OORG! ;››( SET VX EQUAL TO VX PLUS VY. IN THE CASE OF AN OVERFLOW )›( VF IS SET TO 1. OTHERWISE 0. )›: ADD ( VY VX -- )›  (VXYCMD) $8004 OORG! ;››( SET VX EQUAL TO VX MINUS VY. IN THE CASE OF AN UNDERFLOW )›( VF IS SET 0. OTHERWISE 1.  VF = VX > VY )›: SUB ( VY VX -- )›  (VXYCMD) $8005 OORG! ;››( SET VX EQUAL TO VX BITSHIFTED RIGHT 1. VF IS SET TO THE LEAST )›( SIGNIFICANT BIT OF VX PRIOR TO THE SHIFT. ORIGINALLY THIS OPCODE )›( MEANT SET VX EQUAL TO VY BITSHIFTED RIGHT 1 BUT EMULATORS AND SOFTWARE )›( SEEM TO IGNORE VY NOW. )›: SHRV ( VY VX -- )›  (VXYCMD) $8006 OORG! ;›: SHR ( VX -- )›  V0 SWAP SHRV ;››( SET VX EQUAL TO VY MINUS VX. VF IS SET TO 1 IF VY > VX. OTHERWISE 0 )›: SBR ( VY VX -- )›  (VXYCMD) $8007 OORG! ;››( SET VX EQUAL TO VX BITSHIFTED LEFT 1. VF IS SET TO THE MOST SIGNIFICANT )›( BIT OF VX PRIOR TO THE SHIFT. ORIGINALLY THIS OPCODE MEANT SET VX EQUAL )›( TO VY BITSHIFTED LEFT 1 BUT EMULATORS AND SOFTWARE SEEM TO IGNORE VY NOW )›: SHLV ( VY VX -- )›  (VXYCMD) $800E OORG! ;›: SHL ( VX -- )›  V0 SWAP SHLV ;››( SKIP THE NEXT INSTRUCTION IF VX DOES NOT EQUAL VY )›: SNEV ( VY VX -- )›  (VXYCMD) $9000 OORG! ;››( SET I EQUAL TO NNN )›: LDI ( NNN -- )›  $0FFF AND $A000 OORG! ;››( SET THE PC TO NNN PLUS THE VALUE IN V0 )›: JPV ( NNN -- )›  $0FFF AND $B000 OORG! ;››( SET VX EQUAL TO A RANDOM NUMBER RANGING FROM 0 TO 255 )›(  WHICH IS LOGICALLY ANDED WITH NN )›: RND ( NN VX -- )›  $00FF AND >< OR $C000 OORG! ;››( DISPLAY N-BYTE SPRITE STARTING AT MEMORY LOCATION I AT VX, VY. )›( EACH SET BIT OF XORED WITH WHAT'S ALREADY DRAWN. VF IS SET TO  )›( 1 IF A COLLISION OCCURS. 0 OTHERWISE. )›: DRW ( N VY VX -- )›  (VXYCMD) SWAP $000F AND OR›  $D000 OORG! ;››( PREPARE FOR E/F COMMANDS USING VX AS PARAMETER )›: (VXCMD)›  $000F AND >< ;››( SKIP THE FOLLOWING INSTRUCTION IF THE KEY REPRESENTED BY THE )›(  VALUE IN VX IS PRESSED.)›: SKP ( VX -- )›  (VXCMD) $E09E OORG! ;››( SET VX EQUAL TO THE DELAY TIMER. )›: LDT ( VX -- )›  (VXCMD) $F007 OORG! ;››( WAIT FOR A KEY PRESS AND STORE THE VALUE OF THE KEY INTO VX. )›: LKY ( VX -- )›  (VXCMD) $F00A OORG! ;››( SET THE DELAY TIMER DT TO VX. )›: SDT ( VX -- )›  (VXCMD) $F015 OORG! ;››( SET THE SOUND TIMER ST TO VX. )›: SST ( VX -- )›  (VXCMD) $F018 OORG! ;››( ADD VX TO I. VF IS SET TO 1 IF I > 0X0FFF. OTHERWISE SET TO 0. )›: AVI ( VX -- )›  (VXCMD) $F01E OORG! ;››( SET I TO THE ADDRESS OF THE CHIP-8 8X5 FONT SPRITE REPRESENTING )›( THE VALUE IN VX. )›: LDF ( VX -- )›  (VXCMD) $F029 OORG! ;››( CONVERT THAT WORD TO BCD AND STORE THE 3 DIGITS AT MEMORY LOCATION )›( I THROUGH I+2. I DOES NOT CHANGE. )›: BCD›  (VXCMD) $F033 OORG! ;››( STORE REGISTERS V0 THROUGH VX IN MEMORY STARTING AT LOCATION I. )›( I DOES NOT CHANGE )›: STR ( VX -- )›  (VXCMD) $F055 OORG! ;››( COPY VALUES FROM MEMORY LOCATION I THROUGH I + X INTO REGISTERS )›( V0 THROUGH VX. I DOES NOT CHANGE. )›: LDR ( VX -- )›  (VXCMD) $F065 OORG! ;››( STORE SINGE BYTES IN MEMORY )›: DB ( N -- )›  'ORG @ CH8MEM @ + C!›  'ORG @ 1+ $0FFF AND 'ORG !›  'ORG @ MAXMEM @ > IF 'ORG @ MAXMEM ! THEN ;››( SET VX EQUAL TO THE BITWISE OR OF THE VALUES IN VX AND VY )›: ORR ( VY VX -- )›  (VXYCMD) $8001 OORG! ;››( SET VX EQUAL TO THE BITWISE AND OF THE VALUES IN VX AND VY )›: AND ( VY VX -- )›  (VXYCMD) $8002 OORG! ;››( SET VX EQUAL TO THE BITWISE XOR OF THE VALUES IN VX AND VY )›: XOR ( VY VX -- )›  (VXYCMD) $8003 OORG! ;››( CREATE LABEL FOR JUMPS )›: LABEL:›  CREATE 'ORG @ ,›  DOES> @ ;››( SAVE BINARY IMAGE )›: SAVEBIN ( <NAME> )›  CR ." SAVING CHIP-8 BINARY ..." CR›  CH8MEM @ $200 + MAXMEM @ $200 - SAVEFILE›  MAXMEM @ $200 - . ." BYTES SAVED." CR ;››( STARTUP BANNER )›: BANNER›  HERE CH8MEM !›  $1000 ALLOT›  CH8MEM @ $1000 ERASE›  PAGE›  CR ." CHIP-8 ASSEMBLER V:0.2"›  CR ." (C) 2023 CAS/PSC"›  CR ." HTTPS://GITHUB.COM/CSTROTM/CH8ASM"›  CR QUIT ;››' BYE ALIAS DOS›' INCLUDE" ALIAS ASM›' PAGE ALIAS CLEAR››' BANNER IS 'COLD›SAVE›SAVE-SYSTEM D:CH8ASM.COM›